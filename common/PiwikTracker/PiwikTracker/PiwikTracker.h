//
//  PiwikTracker.h
//  PiwikTracker
//
//  Created by Mattias Levin on 11/19/11.
//  Copyright 2011 Mattias Levin. All rights reserved.
//

#import <Foundation/Foundation.h>

@class PTEvent;


/**
 A PiwikTracker framework in Objective-C for sending events to a Piwik server.
 
 Piwik server is downloadable, Free/Libre (GPLv3 licensed) real time web analytics software, [http://piwik.org](http://piwik.org).
 
 ###How does it work
 
 1. Request the shared tracker 
 2. Start the tracking
 3. Track events and goals
 4. Dispatch all events in the queue to the Piwik server
 5. Stop the tracker when the app stops
 
 Events and goals are stored in a locally persisted queue until they are dispatched to the Piwik server.

 All methods are asynchroneously and will return immediately. A completion block will be run with the outcome of the operation.
 
 ###Notifications
 
 Notification will be used to inform about the progress. 
 
 - `PTEventQueuedSuccessNotification` - The event was successfully queued
 - `PTEventQueuedFailedNotification` - The event failed to be queued
 - `PTDispatchSuccessNotification` - All queued events was dispatched to the piwik server
 - `PTDispatchFailedNotification` - Dispatched failed
 
 ###Dispatch strategies
 
 Three ready-made dispatch strategies class are provided and can be useded as is or be further customized.
 
 - `PTTimerDispatchStrategy` - Automatically initiate a dispatch after a certain time interval
 - `PTRetryDispatchStrategy` - Automatically perform repeated dispatch retries (until a specified limit) if a dispatch fails
 - `PTCounterDispatchStrategy` - automatically initiate a dispatch when there are more cached events then a certain trigger value
 
 */
@interface PiwikTracker : NSObject


/** @name Start tracking */



/**
 Get the shared tracker.
 @return Shared Piwik tracker singletone object.
 */
+ (PiwikTracker*)sharedTracker;

/**
 Start the tracker. 
 
 Starting the tracker is the same a starting a new visit, typically each time the application is started or any other place relevant for the application context.
 @param piwikURL The url to the Piwik server.
 @param siteID The site id of the Piwik project.
 @param authenticationToken The token must be either the Super User token, or a user with "admin" permission for this website ID. This token is needed in order to override the IP address, date and time of the event otherwise generated by the Piwik server when the event is received. Set the value to nil to use the values generated by the Piwik server.
 @param error An optional error message
 @return YES if the tracking was initialized successfully, otherwise NO together with an error message.
 */
- (BOOL)startTrackerWithPiwikURL:(NSString*)piwikURL 
                          siteID:(NSString*)siteID 
             authenticationToken:(NSString*)authenticationToken
                       withError:(NSError**)error;


/**
 Stop the tracker. 
 
 Stopping the tracker is the same as ending the visit, typically when the application is terminated or any other place relevant for the application context. 
 @return YES if the tracker was stopped
 */
- (BOOL)stopTracker;


/** @name Track events */

/**
 Track a single pageview.
 
 Notifications will be sent out to indicate progress.
 @param pageName The page title to track.
 @param block A block that will be executed when the request completes or fails
 */
- (void)trackPageview:(NSString*)pageName completionBlock:(void(^)(NSError* error))block;


/**
 Track a goal conversion
 
 Notifications will be sent out to indicate progress.
 @param goal The goal to record a convertion for
 @param block A block that will be executed when the request completes or fails
 */
- (void)trackGoal:(NSInteger)goal completionBlock:(void(^)(NSError*))block;


/**
 Track a goal conversion with a specific revenue
 
 Notifications will be sent out to indicate progress.
 @param goal The goal to record a conversion for
 @param revenue The revenue for this conversion
 @param block A block that will be executed when the request completes or fails
 */
- (void)trackGoal:(NSInteger)goal withRevenue:(double)revenue completionBlock:(void(^)(NSError* error))block;


/** @name Dispatch events */

/**
 Dispatch all tracked events currently stored in the queue to the Piwik server. 
  
 Notifications will be sent out to indicate progress.
 @param block A block that will be executed when the request completes or fails
 */ 
- (void)dispatchWithCompletionBlock:(void(^)(NSError* error))block;

/**
 Method for deleting all events in the queue.
 @param block A block that will be executed when the request completes or fails
 */
- (void)emptyQueueWithCompletionBlock:(void(^)(NSError* error))block;


/** @name Properties */

/**
 Returns if the tracker is currently tracking or not.
 */
@property (readonly) BOOL isTracking;

/**
 The visitor id is is used to track a unique user. 
 
 The visitor id is generated the first time the app is started and reused in all subsequent events. If the application is uninstalled and installed again a new id is generated. Normally there is no reason to change this value unless the application have a better way of providing a unqiue user id.
 */
@property (nonatomic, strong) NSString *visitorID;

/**
 The user-agent profile sent to the Piwik server. 
 
 The user agent is read from the platform dynamically. Normally there is no reason to change this value.
 */
@property (nonatomic, strong) NSString *userAgent;

/**
 The sample rate controlls the probability that the event will be sampled and sent to the Piwik server. The value must an integer between 0 and 100.
 
 The default value is 100 indicating that no samlping will be peformed and all events will be sent to the Piwik server. 90 means that there is a 90% probabilty that the event will be sent. Use this if your application is generating many events to reduce load in the application and Piwik server.
 */
@property (nonatomic) NSInteger sampleRate;

/**
 If dry run is set to YES, events will not be sent to the Piwik server but logged to the console for testing and debugging purpose.
 */
@property (nonatomic) BOOL dryRun;

/**
 Allows the Piwik server to detect the users country if GeoIP is not enabled. 
 
 This value is set default to the device current locale language code. Normally there is no reason to change this value unless the application have a better way to detect the language.
 */
@property (nonatomic, strong) NSString *acceptLanguage;

/**
 The maximum number of cached events before the SDK will stop queing events. Default value is 100.
 */
@property (nonatomic) NSInteger maximumNumberOfCachedEvents;


/**
 A user can opt out from generating tracking data. If set to YES no data will be sent to the Piwik server.
 The value will persist through app restarts until it is manually changed.
 */
@property (nonatomic) BOOL optOut;
 


@end


